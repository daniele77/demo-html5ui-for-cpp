/*******************************************************************************
 * Copyright (C) 2017 Daniele Pallastrelli
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

"use strict"

//////////////////////////////////////////////////////////////////
// WsClient

// public methods:

function WsClient(wsAdd, connectionHandler) {

    var self = this;

    this.service = null;
    this.eventActions = {};

    function parseEvent(json) {
        const msg = JSON.parse(json);
        if (self.eventActions.hasOwnProperty(msg.event)) {
            self.eventActions[msg.event](msg);
        }
    }

    function connect() {
        self.service = new WebSocket(wsAdd);
        self.service.onmessage = function (event) {
            parseEvent(event.data);
        };
        self.service.onopen = function () {
            console.log('WS connected');
            connectionHandler(true);
        };
        self.service.onclose = function () {
            console.log('WS closed');
            connectionHandler(false);
            setTimeout(function () {
                console.log('trying to reconnect');
                connect();
            }, 1000);
        };
        self.service.onerror = function () {
            console.log('WS error');
            self.service.close();
        };
    }

    connect();
}

/*
Acp.prototype.disconnect = function() {
    if (this.service == null) return;
    this.service.close();
    this.service = null;
}
*/

WsClient.prototype.addEventAction = function (type, handler) {
    this.eventActions[type] = handler;
}

WsClient.prototype.send = function (msg) {
    if (this.service == null) return;

    if (this.service.readyState === this.service.OPEN)
        this.service.send(msg);
}

WsClient.prototype.sendObj = function (obj) {
    //console.log('sending %o', obj);
    const msg = JSON.stringify(obj);
    this.send(msg);
}

////////////////////////////////////////////////////////////


function SoftPhone(_proxy) {
    this.proxy = _proxy;
}

SoftPhone.prototype.connect = function (server, user, password) {
    const req = {
        request: 'connection',
        server: server,
        user: user,
        password: password
    };
    this.proxy.sendObj(req);
}

SoftPhone.prototype.call = function (number) {
    const req = {
        request: 'call',
        number: number
    };
    this.proxy.sendObj(req);
}

SoftPhone.prototype.answer = function () {
    const req = {
        request: 'answer'
    };
    this.proxy.sendObj(req);
}

SoftPhone.prototype.hangup = function () {
    const req = {
        request: 'hangup'
    };
    this.proxy.sendObj(req);
}

// connection

var proxy = null;
var softphone = null;

function connect() {
    const ip = "localhost";
    const port = "9971";

    const add = 'ws://' + ip + ':' + port;
    console.log('using ws address: ' + add);
    proxy = new WsClient(add, function (connected) {
        if (connected) console.log('connected');
        else console.log('disconnected');
    });
    proxy.addEventAction("levels", function (data) {
        document.getElementById('mic').style.width = data.miclevel + '%';
        document.getElementById('speaker').style.width = data.speakerlevel + '%';
    });
    proxy.addEventAction("status", function (data) {
        document.getElementById('status').innerHTML = data.status;
    });

    softphone = new SoftPhone(proxy);
}

// init

$(function () {

    connect();

    document.getElementById('connectbtn').onclick = function () {
        var server = document.getElementById('server').value;
        var user = document.getElementById('user').value;
        var password = document.getElementById('password').value;
        softphone.connect(server, user, password);
    }

    document.getElementById('callbtn').onclick = function () {
        var number = document.getElementById('number').value;
        softphone.call(number);
    }

    document.getElementById('answerbtn').onclick = function () {
        softphone.answer();
    }

    document.getElementById('hangupbtn').onclick = function () {
        softphone.hangup();
    }

    document.getElementById('autoanswer').onclick = function () {
        var value = 'no';
        if (document.querySelector('#autoanswer').checked)
            value = 'yes';
        const req = {
            request: 'autoanswer',
            value: value
        };
        proxy.sendObj(req);
    }

    document.getElementById('agc').onclick = function () {
        var value = 'no';
        if (document.querySelector('#agc').checked)
            value = 'yes';
        const req = {
            request: 'agc',
            value: value
        };
        proxy.sendObj(req);
    }

    document.getElementById('volume').oninput = function () {
        const req = {
            request: 'volume',
            value: this.value
        };
        proxy.sendObj(req);
    }

});